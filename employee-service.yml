spring: 
  #application:
    #name: EMPLOYEE-SERVICE
  datasource:
    url: jdbc:mysql://localhost:3306/employee
    username: employee
    password: employee
  jpa:
    properties:
      hibernate:
       dialect: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: update #Hibernate cria automaticamente as tabelas
    open-in-view: false #Best practice in modern Spring Boot apps (especially REST APIs) is to set spring.jpa.open-in-view=false and fetch all required data in the service layer.
  boot:
    message: Hello, Employee Service Spring Cloud Bus Demo.
server:
  port: 8081 #8081 #Mudanca da porta em que a APP inicia.
department:
  web-service-base-url: http://localhost:8080
  getDepartmentByCodePath: /api/department/getDepartmentByCode/
  url-name: DEPARTMENT-SERVICE
  load-balancer-name: DEPARTMENT-SERVICE #Load balancing. URL que esta no Eureka Server (http:localhost:8671/eureka) para permitr balanceamentod e carga. O Eureka Server ja vem com isso. Fica no Aplication Name
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
management: #   <!-- Config distributed tracing using Micrometer(Replacing Spring Sleuth) and Zipkin. Auxilia no tracing do fluxo de chamamento de APIs entre os microservicos e o tempo de chamamento do servico.-->
  tracing:
    sampling:
      probability: 1.0
  endpoints:
    web:
      exposure:
        include:
        - metrics, prometheus, health, info
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
  prometheus:
    metrics:
      export:
        enabled: true
logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
  level:
    org:
      springframework:
        web: DEBUG 
